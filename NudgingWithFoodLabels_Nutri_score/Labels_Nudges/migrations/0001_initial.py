# Generated by Django 3.2.6 on 2021-08-16 15:19

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import multiselectfield.db.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='HealthyRecipe',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('URL', models.CharField(max_length=300)),
                ('Name', models.CharField(max_length=500)),
                ('fiber_g', models.CharField(max_length=50)),
                ('sodium_g', models.CharField(max_length=50)),
                ('carbohydrates_g', models.CharField(max_length=50)),
                ('fat_g', models.CharField(max_length=50)),
                ('protein_g', models.CharField(max_length=50)),
                ('sugar_g', models.CharField(max_length=50)),
                ('saturate_g', models.CharField(max_length=50)),
                ('size_g', models.CharField(max_length=50)),
                ('Servings', models.CharField(max_length=50)),
                ('calories_kCal', models.CharField(max_length=50)),
                ('category', models.CharField(max_length=50)),
                ('image_link', models.CharField(max_length=500)),
                ('fat_100g', models.CharField(max_length=50)),
                ('fiber_100g', models.CharField(max_length=50)),
                ('sugar_100g', models.CharField(max_length=50)),
                ('saturated_100g', models.CharField(max_length=50)),
                ('protien_100g', models.CharField(max_length=50)),
                ('sodium_100mg', models.CharField(max_length=50)),
                ('carbohydrates_100g', models.CharField(max_length=50)),
                ('kj_100g', models.CharField(max_length=50)),
                ('Nutri_score', models.CharField(max_length=50)),
                ('Fsa_new', models.CharField(max_length=50)),
                ('salt_100g', models.CharField(max_length=50)),
                ('salt_g', models.CharField(max_length=50)),
                ('fat_count', models.CharField(max_length=50)),
                ('satfat_count', models.CharField(max_length=50)),
                ('sugar_count', models.CharField(max_length=50)),
                ('salt_count', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'HealthyRecipe',
                'db_table': 'HealthyRecipe',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Personal_info',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(default='Personal_info', editable=False, max_length=50)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('age', models.CharField(choices=[(None, ''), ('under_18', 'Under 18'), ('b18_24', '18-24'), ('b25_35', '25-35'), ('b35_45', '35-45'), ('b45_55', '45-55'), ('bover_55', 'Over 55')], default=None, max_length=120, verbose_name='age')),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('education', models.CharField(choices=[(None, ''), ('Less_high_school', 'Less than high school'), ('High_school', 'High school or equivalent'), ('BA', 'Bachelor degree (e.g. BA, BSc)'), ('MSc', 'Master degree (e.g. MA, MSc)'), ('Doctorate', 'Doctorate (e.g. PhD)'), ('Not', 'Prefer not to say')], default=None, max_length=120, verbose_name='education')),
                ('diet_restriction', multiselectfield.db.fields.MultiSelectField(choices=[('No_dietary_restrictions', 'No dietary restrictions'), ('Diabetes', 'Diabetes'), ('Gluten_free', 'Gluten free'), ('Halal', 'Halal'), ('Kosher', 'Kosher'), ('Lactose_intolerance', 'Lactose intolerance'), ('Pescatarian', 'Pescatarian'), ('Vegeterian', 'Vegetarian'), ('Allergies', 'Allergies')], max_length=110, verbose_name='DietRestrictions')),
                ('diet_goal', multiselectfield.db.fields.MultiSelectField(choices=[('No_goals', 'No goals'), ('Eat_less_salt', 'Eat less salt'), ('Eat_less_sugar', 'Eat less sugar'), ('Eat_more_fruit', 'Eat more fruit'), ('Eat_more_protein', 'Eat more protein'), ('Eat_more_vegetables', 'Eat more vegetables'), ('Gain_weight', 'Gain weight'), ('Lose_weight', 'Lose weight')], max_length=113, verbose_name='DietGoals')),
                ('cooking_exp', models.CharField(choices=[('Very_Low', 'Very Low'), ('Low', 'Low'), ('Medium', 'Medium'), ('High', 'High'), ('Very High', 'Very high')], default=None, max_length=300, verbose_name='cooking_exp')),
                ('eating_habits', models.CharField(choices=[('Very_unhealthy', 'Very Unhealthy'), ('Unhealthy', 'Unhealthy'), ('Neither_healthy_no_unhealthy', 'Neither healthy nor unhealthy'), ('Healthy', 'Healthy'), ('Very_Healthy', 'Very Healthy')], default=None, max_length=300, verbose_name='eating_habits')),
                ('gender', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female'), ('refuse_to_disc', 'Other / Prefer not to say')], default=None, max_length=300, verbose_name='gender')),
            ],
            options={
                'verbose_name': 'personal_info',
                'db_table': 'personal_info',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Recipes',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('URL', models.CharField(max_length=500, verbose_name='URL')),
                ('Name', models.CharField(max_length=300, verbose_name='Name')),
                ('category', models.CharField(max_length=500, verbose_name='category')),
                ('Size', models.CharField(max_length=200, verbose_name='Size')),
                ('Serving', models.CharField(max_length=200, verbose_name='Servings')),
                ('Calories', models.CharField(max_length=200, verbose_name='Calories')),
                ('image_link', models.CharField(max_length=500, verbose_name='image')),
            ],
            options={
                'verbose_name': 'Recipes',
                'db_table': 'Recipes',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='UnhealthyRecipe',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('URL', models.CharField(max_length=300)),
                ('Name', models.CharField(max_length=500)),
                ('fiber_g', models.CharField(max_length=50)),
                ('sodium_g', models.CharField(max_length=50)),
                ('carbohydrates_g', models.CharField(max_length=50)),
                ('fat_g', models.CharField(max_length=50)),
                ('protein_g', models.CharField(max_length=50)),
                ('sugar_g', models.CharField(max_length=50)),
                ('saturate_g', models.CharField(max_length=50)),
                ('size_g', models.CharField(max_length=50)),
                ('Servings', models.CharField(max_length=50)),
                ('calories_kCal', models.CharField(max_length=50)),
                ('category', models.CharField(max_length=50)),
                ('image_link', models.CharField(max_length=500)),
                ('fat_100g', models.CharField(max_length=50)),
                ('fiber_100g', models.CharField(max_length=50)),
                ('sugar_100g', models.CharField(max_length=50)),
                ('saturated_100g', models.CharField(max_length=50)),
                ('protien_100g', models.CharField(max_length=50)),
                ('sodium_100mg', models.CharField(max_length=50)),
                ('carbohydrates_100g', models.CharField(max_length=50)),
                ('kj_100g', models.CharField(max_length=50)),
                ('Nutri_score', models.CharField(max_length=50)),
                ('Fsa_new', models.CharField(max_length=50)),
                ('salt_100g', models.CharField(max_length=50)),
                ('salt_g', models.CharField(max_length=50)),
                ('fat_count', models.CharField(max_length=50)),
                ('satfat_count', models.CharField(max_length=50)),
                ('sugar_count', models.CharField(max_length=50)),
                ('salt_count', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'UnhealthyRecipe',
                'db_table': 'UnhealthyRecipe',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='FoodCategory',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('category', models.CharField(choices=[(None, ''), ('Fruits and Vegetables', 'Fruits and Vegetables'), ('Seafood', 'Seafood'), ('Meat and Poultry', 'Meat and Poultry'), ('Pasta and Noodles', 'Pasta and Noodles'), ('Barbecue', 'Barbecue')], default=None, max_length=50, verbose_name='Category')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Labels_Nudges.personal_info')),
            ],
            options={
                'verbose_name': 'FoodCategory',
                'db_table': 'FoodCategory',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='EvaluateChoices',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(default='EvaluateChoices', editable=False, max_length=50)),
                ('recommend_recipe', models.CharField(choices=[('Strongly_Disagree', 'Strongly Disagree'), ('Disagree', 'Disagree'), ('Neutral', 'Neutral'), ('Agree', 'Agree'), ('Strongly_Agree', 'Strongly Agree')], default=None, max_length=100, verbose_name='recommend_recipe')),
                ('become_favorite', models.CharField(choices=[('Strongly_Disagree', 'Strongly Disagree'), ('Disagree', 'Disagree'), ('Neutral', 'Neutral'), ('Agree', 'Agree'), ('Strongly_Agree', 'Strongly Agree')], default=None, max_length=100, verbose_name='become_favorite')),
                ('enjoy_eating', models.CharField(choices=[('Strongly_Disagree', 'Strongly Disagree'), ('Disagree', 'Disagree'), ('Neutral', 'Neutral'), ('Agree', 'Agree'), ('Strongly_Agree', 'Strongly Agree')], default=None, max_length=100, verbose_name='enjoy_eating')),
                ('many_to_choose', models.CharField(choices=[('Strongly_Disagree', 'Strongly Disagree'), ('Disagree', 'Disagree'), ('Neutral', 'Neutral'), ('Agree', 'Agree'), ('Strongly_Agree', 'Strongly Agree')], default=None, max_length=100, verbose_name='many_to_choose')),
                ('easy_choice', models.CharField(choices=[('Strongly_Disagree', 'Strongly Disagree'), ('Disagree', 'Disagree'), ('Neutral', 'Neutral'), ('Agree', 'Agree'), ('Strongly_Agree', 'Strongly Agree')], default=None, max_length=100, verbose_name='easy_choice')),
                ('choice_overwhelming', models.CharField(choices=[('Strongly_Disagree', 'Strongly Disagree'), ('Disagree', 'Disagree'), ('Neutral', 'Neutral'), ('Agree', 'Agree'), ('Strongly_Agree', 'Strongly Agree')], default=None, max_length=100, verbose_name='choice_overwhelming')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Labels_Nudges.personal_info')),
            ],
            options={
                'verbose_name': 'EvaluateChoices',
                'db_table': 'EvaluateChoices',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Unhealthy_ratings',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('unhealthy_rating', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Labels_Nudges.personal_info')),
                ('unhealthy_recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Labels_Nudges.unhealthyrecipe')),
            ],
            options={
                'verbose_name': 'unhealthy_ratings',
                'db_table': 'unhealthy_ratings',
                'unique_together': {('unhealthy_recipe', 'person')},
            },
        ),
        migrations.CreateModel(
            name='SelectedRecipe',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('recipe_id', models.IntegerField()),
                ('recipe_name', models.CharField(max_length=200)),
                ('Nutri_score', models.CharField(max_length=100)),
                ('fsa_score', models.CharField(max_length=100)),
                ('healthiness', models.CharField(max_length=50)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Labels_Nudges.personal_info')),
            ],
            options={
                'verbose_name': 'selectedRecipe',
                'db_table': 'selectedrecipe',
                'unique_together': {('person', 'recipe_id')},
            },
        ),
        migrations.CreateModel(
            name='Healthy_ratings',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('healthy_rating', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('healthy_recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Labels_Nudges.healthyrecipe')),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Labels_Nudges.personal_info')),
            ],
            options={
                'verbose_name': 'healthy_ratings',
                'db_table': 'healthy_ratings',
                'unique_together': {('healthy_recipe', 'person')},
            },
        ),
    ]
